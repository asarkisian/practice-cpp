//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Main.h"
#include "GameConstants.h"
#include "HallOfFame.h"
//---------------------------------------------------------------------------

//Randomize the rand() method
randomize();

extern int timerFlag;

void __fastcall TfrmMain::gameStart(){

  //Makes the hallOfFame menu visible to everybody
	HallOfFame1->Visible = true;

 //Checks to see if previous top scores list exists. if not create it
 theRecords.initializeList();

START_OVER:

	 //Initialize method;
	 initializeValues();

 for(playersLevel = currentLevel; playersLevel<=(MAX_LEVELS);++playersLevel){
	frmMain->numberOfLevel->Caption = StrToInt(playersLevel);

		//Checks to see if it is a bonus level or not. If it is then it will display
		//text on the left and right side of the window indicating it is a bonus level
		if(currentLevel == (SPECIAL_LEVELONE)
		 || currentLevel == (SPECIAL_LEVELTWO)
		 || currentLevel == (SPECIAL_LEVELTHREE)
		 || currentLevel == (SPECIAL_LEVELFOUR)
		 || currentLevel == (SPECIAL_LEVELFIVE)
		 || currentLevel == (SPECIAL_LEVELSIX)
		 || currentLevel == (SPECIAL_LEVELSEVEN)
		 || currentLevel == (SPECIAL_LEVELEIGHT)
		 || currentLevel == (SPECIAL_LEVELNINE)
		 || currentLevel == (SPECIAL_LEVELTEN)
		 || currentLevel == (SPECIAL_LEVELELEVEN) ){

			//Bonus Level Text Turned ON because player reached special level (bonus level)
			bonusLevel1->Visible = true;
			bonusLevel2->Visible = true;
		 }
		 else{

			//Bonus Level Text Turned Off because its not a special level (bonus level)
			bonusLevel1->Visible = false;
			bonusLevel2->Visible = false;
		 }







		

	for(register int i(0);i<(BRICK_MAX);++i)
		Shape3[i]->Visible = true;

		//Setting up the values for the mainMenu options
		StartGame1->Enabled = false;
		EndGame1->Enabled = true;

			//Indefinite Loop
			for(;;){

				if(gExit == true)
					return;

				//Initializing players attribs in frmMain
				frmMain->numberOfCredits->Caption = playersCredits;
				frmMain->numberOfLevel->Caption = playersLevel;
				frmMain->numberOfMisses->Caption = playersMisses;
				frmMain->numberOfScore->Caption = playersScore;

				// Speed of the ball. (Default = Moderate)
				if(controlKey_up==1) myBall->Top-=( /*BALL_SPEED_UP*/paddle_ballSpeedUp  + usr_ballspeed);
				else if(controlKey_down==1) myBall->Top+=( /*BALL_SPEED_DOWN*/paddle_ballSpeedDown  + usr_ballspeed);
				if(controlKey_left==1) myBall->Left-=( /*BALL_SPEED_LEFT*/paddle_ballSpeedLeft + usr_ballspeed);
				else if(controlKey_right==1) myBall->Left+=( /*BALL_SPEED_RIGHT*/paddle_ballSpeedRight  + usr_ballspeed);

        //Sleeps the ball while in motion for BALL_SLEEP amount of seconds
				Sleep(BALL_SLEEP);

				//This function checks to see if whether or not the ball hit anything
				if(!interceptedPaddleBallBrick()){	//if returned false, the user beat the level
					initializeValues();
					break;	//since the user beat the level, break out of this loop and update currentLevel and playersLevel
				}
		 }
  }
}
