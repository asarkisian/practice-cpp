//---------------------------------------------------------------------------

#include <windows.h>
#include <vcl.h>
#pragma hdrstop

#include "Main.h"
#include "GameConstants.h"
#include "HallOfFame.h"
//---------------------------------------------------------------------------

randomize();

bool __fastcall TfrmMain::interceptedPaddleBallBrick(){

	for(int index(0); index < BRICK_MAX; ++index){

		//Checks the frmMain TOP Window
		if(myBall->Top <= 0){
			if(controlKey_up == true && controlKey_down == false
			&& controlKey_left == false && controlKey_right == false){
				controlKey_up = false;
				controlKey_down = true;
				controlKey_left = false;
				controlKey_right = false;
			}
			else if(controlKey_left == true){
				controlKey_up = false;
				controlKey_left = true;
				controlKey_right = false;
				controlKey_down = true;
			}
			else if(controlKey_right == true){
				controlKey_up = false;
				controlKey_left = false;
				controlKey_right = true;
				controlKey_down = true;
			}
		}

		//Checks the frmMain BOTTOM (Black) Window
		else if(myBall->Top + myBall->Height >= blackFloor->Top){

	/*Decrease players score because they hit the black floor and lost depending
	on their skill level */
	if(frmMain->mnuBallSlowest->Checked == true)
			frmMain->numberOfScore->Caption = StrToInt(frmMain->numberOfScore->Caption) - SLOWEST_MISS_SCORE;
	else 	if(frmMain->mnuBallSlow->Checked == true)
			frmMain->numberOfScore->Caption = StrToInt(frmMain->numberOfScore->Caption) - SLOW_MISS_SCORE;
	else 	if(frmMain->mnuBallMod->Checked == true)
			frmMain->numberOfScore->Caption = StrToInt(frmMain->numberOfScore->Caption) - MOD_MISS_SCORE;
	else 	if(frmMain->mnuBallFast->Checked == true)
			frmMain->numberOfScore->Caption = StrToInt(frmMain->numberOfScore->Caption) - FAST_MISS_SCORE;
	else 	if(frmMain->mnuBallFastest->Checked == true)
			frmMain->numberOfScore->Caption = StrToInt(frmMain->numberOfScore->Caption) - FASTEST_MISS_SCORE;

		//Copying the players score to the var playersScore for later use
		playersScore = StrToInt(frmMain->numberOfScore->Caption);

		//Adds one to the misses. Everytime the player misses, it will increment misses
		frmMain->numberOfMisses->Caption = StrToInt(frmMain->numberOfMisses->Caption) + 1;

		//Update the playersMisses variable
		frmMain->playersMisses = StrToInt(frmMain->numberOfMisses->Caption);

ANOTHER_CHANCE:

	 //Decreases the credits. If player has 0 credits the game ends
	 if(frmMain->numberOfCredits->Caption != "1"){

	 //Display and deduct -1 from the numberOfCredits control
	 frmMain->numberOfCredits->Caption = StrToInt(frmMain->numberOfCredits->Caption) - 1;

	 //Update the playersCredits variable
	 frmMain->playersCredits = StrToInt(frmMain->numberOfCredits->Caption);

		//Pause the game for a while after the player misses to give him a chance
		Sleep(1000);	//1 second

	playerNewGame = false;
	playerWinGame = false;
	playerLoseGame = true;
	playerRestartGame = false;
	playerEndGame = false;

		//Since the player has credit(s). the game will continue without ending
		gameStart();
	 }
	 else if(frmMain->numberOfCredits->Caption == "1"){

 if(frmMain->playersScore > (CREDIT_COST)){
	if(MessageBox(NULL, "Would you like to purchase a single credit for 1,500 points?", "Credit Store", MB_YESNO | MB_ICONQUESTION | MB_DEFBUTTON1)==IDYES){

		//Since the player purchased a credit, it will add one
		frmMain->playersCredits += RETURN_CREDIT;
		frmMain->numberOfCredits->Caption = IntToStr(frmMain->playersCredits);

		//Since the player purchased a credit, it will decrease their points by (CREDIT_COST)
		frmMain->playersScore -= CREDIT_COST;
		frmMain->numberOfScore->Caption = IntToStr(frmMain->playersScore);

		goto ANOTHER_CHANCE;
	}
 }
		gameEnd();

//////////////////////////////////////////////////////////////////////////////////

//Checks to see whether or not the player deserves to go up on the top scores list
 bool scoreFlag = theRecords.checkScores(frmMain->playersScore);
		if(scoreFlag == true) theRecords.processInput();

				if(Application->MessageBoxA("Do you want to play again?", "Play Again", MB_YESNO | MB_ICONQUESTION | MB_DEFBUTTON1) == IDYES){

					playerNewGame = false;
					playerWinGame = false;
					playerLoseGame = false;
					playerRestartGame = true;
					playerEndGame = false;

					//Reset all scores and game properties
					playersLevel = 1;
					currentLevel = 1;
					playersCredits = 3;
					playersMisses = 0;
					playersScore = 0;

					 //Indicates that the game is running and not in off-line mode
					 gExit = false;

					 //Initialize and starts the game from Level1 (first time)
					 gameStart();
				}
				else{
				
 					playerNewGame = false;
					playerWinGame = false;
					playerLoseGame = false;
					playerRestartGame = false;
					playerEndGame = true;

					//Reset all scores and game properties
					playersLevel = 1;
					currentLevel = 1;
					playersCredits = 3;
					playersMisses = 0;
					playersScore = 0;

					 //Indicates that the game is running and not in off-line mode
					 gExit = true;
          }
		}
		}
		//Checks the frmMain RIGHT SIDE Window
		else if((myBall->Left + myBall->Width) >= frmMain->Width){

			if(controlKey_up == true){
				controlKey_down = false;
				controlKey_up = true;
			}
			else if(controlKey_down == true){
				controlKey_up = false;
				controlKey_down = true;
			}

			controlKey_left = true;
			controlKey_right = false;
		}
		//Checks the frmMain LEFT side Window
		else if(myBall->Left <= 0){

			if(controlKey_up == true){
				controlKey_down = false;
				controlKey_up = true;
			}
			else if(controlKey_down == true){
				controlKey_up = false;
				controlKey_down = true;
			}

			controlKey_right = true;
			controlKey_left = false;
		}

	 //Algorithm that allows the ball to touch the bricks
	 if((frmMain->myBall->Top <= (frmMain->Shape3[index]->Top + frmMain->Shape3[index]->Height)
			&& frmMain->myBall->Top >= frmMain->Shape3[index]->Top + 5)
			&& ((frmMain->myBall->Left + frmMain->myBall->Width) >= frmMain->Shape3[index]->Left
			&& frmMain->myBall->Left <= (frmMain->Shape3[index]->Left + frmMain->Shape3[index]->Width))){


  //Plays a sound if soundEnabled = true. The file is under BRICK_HIT in GameConstants
	if(soundEnabled == true) PlaySound(BRICK_HIT , NULL , SND_ASYNC | SND_FILENAME);

   			controlKey_up = false;
				controlKey_down = true;

				if(controlKey_left)
					controlKey_left = true;
				else if(controlKey_right)
					controlKey_right = true;

				Shape3[index]->Visible = false;  //Hides it so the user wont see it

        //Not a good method
				Shape3[index]->Left = 1000;			 //Moves it out of the way
				Shape3[index]->Top = 1000; 			 //Moves it out of the way

				amountOfBricksHit+=(1);	//Increment each time a brick is hit

 /////////////////////////////////////////////////////////////////////////////
 //////////PLAYERS SCORING SYSTEM

 if(currentLevel == SPECIAL_LEVELONE
 || currentLevel == SPECIAL_LEVELTWO
 || currentLevel == SPECIAL_LEVELTHREE
 || currentLevel == SPECIAL_LEVELFOUR
 || currentLevel == SPECIAL_LEVELFIVE
 || currentLevel == SPECIAL_LEVELSIX
 || currentLevel == SPECIAL_LEVELSEVEN
 || currentLevel == SPECIAL_LEVELEIGHT
 || currentLevel == SPECIAL_LEVELNINE
 || currentLevel == SPECIAL_LEVELTEN
 || currentLevel == SPECIAL_LEVELELEVEN){

	//Special Level Increase players score because they hit the ball
	if(frmMain->mnuBallSlowest->Checked == true)
			frmMain->numberOfScore->Caption = StrToInt(frmMain->numberOfScore->Caption) + SLOWEST_HIT_SCORE + SPECIAL_LEVEL_HITPOINT_SLOWEST;
	else 	if(frmMain->mnuBallSlow->Checked == true)
			frmMain->numberOfScore->Caption = StrToInt(frmMain->numberOfScore->Caption) + SLOW_HIT_SCORE + SPECIAL_LEVEL_HITPOINT_SLOW;
	else 	if(frmMain->mnuBallMod->Checked == true)
			frmMain->numberOfScore->Caption = StrToInt(frmMain->numberOfScore->Caption) + MOD_HIT_SCORE + SPECIAL_LEVEL_HITPOINT_MODERATE;
	else 	if(frmMain->mnuBallFast->Checked == true)
			frmMain->numberOfScore->Caption = StrToInt(frmMain->numberOfScore->Caption) + FAST_HIT_SCORE + SPECIAL_LEVEL_HITPOINT_FAST;
	else 	if(frmMain->mnuBallFastest->Checked == true)
			frmMain->numberOfScore->Caption = StrToInt(frmMain->numberOfScore->Caption) + FASTEST_HIT_SCORE + SPECIAL_LEVEL_HITPOINT_FASTEST;

			//Update the playersScore variable
			playersScore = StrToInt(frmMain->numberOfScore->Caption);
 }
 else{

	if(frmMain->mnuBallSlowest->Checked == true)
			frmMain->numberOfScore->Caption = StrToInt(frmMain->numberOfScore->Caption) + SLOWEST_HIT_SCORE;
	else 	if(frmMain->mnuBallSlow->Checked == true)
			frmMain->numberOfScore->Caption = StrToInt(frmMain->numberOfScore->Caption) + SLOW_HIT_SCORE;
	else 	if(frmMain->mnuBallMod->Checked == true)
			frmMain->numberOfScore->Caption = StrToInt(frmMain->numberOfScore->Caption) + MOD_HIT_SCORE;
	else 	if(frmMain->mnuBallFast->Checked == true)
			frmMain->numberOfScore->Caption = StrToInt(frmMain->numberOfScore->Caption) + FAST_HIT_SCORE;
	else 	if(frmMain->mnuBallFastest->Checked == true)
			frmMain->numberOfScore->Caption = StrToInt(frmMain->numberOfScore->Caption) + FASTEST_HIT_SCORE;

			//Update the playersScore variable
			playersScore = StrToInt(frmMain->numberOfScore->Caption);
 }

				//Indicates the user has won the level
				if(amountOfBricksHit==(BRICK_MAX)){

						if(playersLevel == MAX_LEVELS){

								playerNewGame = false;
								playerWinGame = false;
								playerLoseGame = false;
								playerRestartGame = false;
								playerEndGame = true;

								 ShowMessage("Congratulations. You won this game!!!");

								 //Checks to see whether or not the player deserves to go up on the top scores list
								 bool scoreFlag = theRecords.checkScores(frmMain->playersScore);
									if(scoreFlag == true) theRecords.processInput();

								 //Game exit is now in progress
								 gExit = true;

								 //GameEnded (Hide the ball)
								 myBall->Visible = false;

								 break;
						}

					Sleep(700);

 /////////////////////////////////////////////////////////////////////////////
 //////////PLAYERS CREDIT SYSTEM

 if(currentLevel == (SPECIAL_LEVELONE - 1)
 || currentLevel == (SPECIAL_LEVELTWO - 1)
 || currentLevel == (SPECIAL_LEVELTHREE - 1)
 || currentLevel == (SPECIAL_LEVELFOUR - 1)
 || currentLevel == (SPECIAL_LEVELFIVE - 1)
 || currentLevel == (SPECIAL_LEVELSIX - 1)
 || currentLevel == (SPECIAL_LEVELSEVEN - 1)
 || currentLevel == (SPECIAL_LEVELEIGHT - 1)
 || currentLevel == (SPECIAL_LEVELNINE - 1)
 || currentLevel == (SPECIAL_LEVELTEN - 1)
 || currentLevel == (SPECIAL_LEVELELEVEN -1) ){

					//Special Level Credit System
					playersCredits+=(2);
					numberOfCredits->Caption = StrToInt(numberOfCredits->Caption += 2);

 }
 else{

					//Since player beat the level. They get an extra credit as a reward
					playersCredits+=(1);
					numberOfCredits->Caption = StrToInt(numberOfCredits->Caption += 1);
 }
					//Give the user a chance to breathe 1 second before advancing to second level
					Sleep(1000);	//1 second

					//Advance to the next level;
					++currentLevel;

          //States that the game is still not over and is advancing to next level
					gExit = false;

					playerNewGame = false;
					playerWinGame = true;
					playerLoseGame = false;
					playerRestartGame = false;
					playerEndGame = false;

					//Even though user has won the level, game is not exiting
					return false;
				}
	 }
	 //Algorithm that allows the ball to touch the left paddle and bounce back up
	 else	if(((frmMain->myBall->Top + frmMain->myBall->Height) >= frmMain->myPaddle->Top
		&& ((frmMain->myBall->Left + frmMain->myBall->Width) >= frmMain->myPaddle->Left)
		&& frmMain->myBall->Left <= (frmMain->myPaddle->Left + frmMain->myPaddle->Width)))
		{
			controlKey_up = true;
			controlKey_down = false;
			controlKey_left = true;
			controlKey_right = false;

			paddle_ballSpeedUp = LEFTPANEL_UP_SPEED;
			paddle_ballSpeedDown = LEFTPANEL_DOWN_SPEED;
			paddle_ballSpeedLeft = LEFTPANEL_LEFT_SPEED;
			paddle_ballSpeedRight = LEFTPANEL_RIGHT_SPEED;
		}
		//Algorithm that it allows the ball to touch the right paddle and bounce back up
		else if(((frmMain->myBall->Top + frmMain->myBall->Height) >= frmMain->myPaddle2->Top
		&& ((frmMain->myBall->Left + frmMain->myBall->Width) >= frmMain->myPaddle2->Left)
		&& frmMain->myBall->Left <= (frmMain->myPaddle2->Left + frmMain->myPaddle2->Width)))
		{
			controlKey_up = true;
			controlKey_down = false;
			controlKey_left = false;
			controlKey_right = true;

			paddle_ballSpeedUp = RIGHTPANEL_UP_SPEED;
			paddle_ballSpeedDown = RIGHTPANEL_DOWN_SPEED;
			paddle_ballSpeedLeft = RIGHTPANEL_LEFT_SPEED;
			paddle_ballSpeedRight = RIGHTPANEL_RIGHT_SPEED;
		}
		//Algorithm that it allows the ball to touch the middle paddle and bounce back up
		else if(((frmMain->myBall->Top + frmMain->myBall->Height) >= frmMain->myPaddle3->Top
		&& ((frmMain->myBall->Left + frmMain->myBall->Width) >= frmMain->myPaddle3->Left)
		&& frmMain->myBall->Left <= (frmMain->myPaddle3->Left + frmMain->myPaddle3->Width)))
		{
			controlKey_up = true;
			controlKey_down = false;
			controlKey_left = false;
			controlKey_right = false;

			paddle_ballSpeedUp = MIDDLEPANEL_UP_SPEED;
			paddle_ballSpeedDown = MIDDLEPANEL_DOWN_SPEED;
			paddle_ballSpeedLeft = MIDDLEPANEL_LEFT_SPEED;
			paddle_ballSpeedRight = MIDDLEPANEL_RIGHT_SPEED;
		}
		//Algorithm that allows the ball to touch the middleLeft paddle and bounce back up
		else	if(((frmMain->myBall->Top + frmMain->myBall->Height) >= frmMain->myPaddle4->Top
		&& ((frmMain->myBall->Left + frmMain->myBall->Width) >= frmMain->myPaddle4->Left)
		&& frmMain->myBall->Left <= (frmMain->myPaddle4->Left + frmMain->myPaddle4->Width)))
		{
			controlKey_up = true;
			controlKey_down = false;
			controlKey_left = true;
			controlKey_right = false;

			paddle_ballSpeedUp = MIDDLELEFTPANEL_UP_SPEED;
			paddle_ballSpeedDown = MIDDLELEFTPANEL_DOWN_SPEED;
			paddle_ballSpeedLeft = MIDDLELEFTPANEL_LEFT_SPEED;
			paddle_ballSpeedRight = MIDDLELEFTPANEL_RIGHT_SPEED;
		}
		//Algorithm that it allows the ball to touch the middleRight paddle and bounce back up
		else if(((frmMain->myBall->Top + frmMain->myBall->Height) >= frmMain->myPaddle5->Top
		&& ((frmMain->myBall->Left + frmMain->myBall->Width) >= frmMain->myPaddle5->Left)
		&& frmMain->myBall->Left <= (frmMain->myPaddle5->Left + frmMain->myPaddle5->Width)))
		{
			controlKey_up = true;
			controlKey_down = false;
			controlKey_left = false;
			controlKey_right = true;

			paddle_ballSpeedUp = MIDDLERIGHTPANEL_UP_SPEED;
			paddle_ballSpeedDown = MIDDLERIGHTPANEL_DOWN_SPEED;
			paddle_ballSpeedLeft = MIDDLERIGHTPANEL_LEFT_SPEED;
			paddle_ballSpeedRight = MIDDLERIGHTPANEL_RIGHT_SPEED;
		}

		Application->ProcessMessages();		//Checks for background queues

		if(gExit){

			//Return back to game-off mode
			return true;
		}
	} //end of for loop
	return true;
}
