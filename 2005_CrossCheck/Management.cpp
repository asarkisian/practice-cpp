/////////////////////////////////////////////////////////////////////////////
#include "stdafx.h"
#include "defines.h"
#include "Management.h"
#include "typedefs.h"
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
using std::vector;
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
DataManagement::DataManagement()
:my_criticalFiles(new vector<fileName_t>),
 my_missingFiles(new vector<fileName_t>),
 my_corruptedFiles(new vector<fileName_t>),
 my_criticalRegistries(new vector<registryName_t>),
 my_missingRegistries(new vector<registryName_t>),
 my_corruptedRegistries(new vector<registryName_t>)
{ 
}
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
DataManagement::~DataManagement()
{
	// Delete files
	delete my_criticalFiles;
	delete my_missingFiles;
	delete my_corruptedFiles;

	// Delete registries
	delete my_criticalRegistries;
	delete my_missingRegistries;
	delete my_corruptedRegistries;
}
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
void DataManagement::addFiles(fileName_t f, std::string mode)
{
	if(mode == CRITICAL)
	{
		my_criticalFiles->push_back(f);
	}
	else if(mode == MISSING)
	{
		my_missingFiles->push_back(f);
	}
	else if(mode == CORRUPTED)
	{
		my_corruptedFiles->push_back(f);
	}
	else
	{
		// error
	}
}
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
void DataManagement::addRegistry(registryName_t r, std::string mode)
{
	if(mode == CRITICAL)
	{
		my_criticalRegistries->push_back(r);
	}
	else if(mode == MISSING)
	{
		my_missingRegistries->push_back(r);
	}
	else if(mode == CORRUPTED)
	{
		my_corruptedRegistries->push_back(r);
	}
	else
	{
		// error
	}
}
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
fileName_t DataManagement::criticalFiles(uint_t elem_) const
{ 
	return my_criticalFiles->at(elem_); 
}
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
fileName_t DataManagement::missingFiles(uint_t elem_) const
{ 
	return my_missingFiles->at(elem_); 
}
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
fileName_t DataManagement::corruptedFiles(uint_t elem_) const
{ 
	return my_corruptedFiles->at(elem_); 
}
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
registryName_t DataManagement::criticalRegistries(uint_t elem_) const
{ 
	return my_criticalRegistries->at(elem_); 
}
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
registryName_t DataManagement::missingRegistries(uint_t elem_) const
{ 
	return my_missingRegistries->at(elem_); 
}
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
registryName_t DataManagement::corruptedRegistries(uint_t elem_)  const
{ 
	return my_corruptedRegistries->at(elem_); 
}
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
bool DataManagement::isMissingFilesEmpty() const
{
	return my_missingFiles->empty();
}
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
bool DataManagement::isMissingRegistriesEmpty() const
{ 
	return my_missingRegistries->empty();
}
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
bool DataManagement::isCorruptedFilesEmpty() const
{
	return my_corruptedFiles->empty();
}
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
bool DataManagement::isCorruptedRegistriesEmpty() const
{
	return my_corruptedRegistries->empty();
}
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
uint_t DataManagement::criticalFilesSize() const
{
	return(my_criticalFiles->size());
}
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
uint_t DataManagement::criticalRegistriesSize() const
{
	return(my_criticalRegistries->size());
}
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
uint_t DataManagement::missingFilesSize() const
{
	return(my_missingFiles->size());
}
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
uint_t DataManagement::missingRegistriesSize() const
{
	return(my_missingRegistries->size());
}
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
uint_t DataManagement::corruptedFilesSize() const
{
	return(my_corruptedFiles->size());
}
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
uint_t DataManagement::corruptedRegistriesSize() const
{
	return(my_corruptedRegistries->size());
}
/////////////////////////////////////////////////////////////////////////////