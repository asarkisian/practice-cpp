///////////////////////////////////////////////////
// Project: ReplaceIt ( RI )
// File:    replace.cpp
///////////////////////////////////////////////////

///////////////////////////////////////////////////
#include "replace.h"
///////////////////////////////////////////////////

///////////////////////////////////////////////////
#include <cctype>
#include <fstream>
#include <iostream>
#include <windows.h>
///////////////////////////////////////////////////

///////////////////////////////////////////////////
using std::cerr;
using std::cout;
using std::domain_error;
using std::endl;
using std::fstream;
using std::getline;
using std::ios;
using std::string;
///////////////////////////////////////////////////

///////////////////////////////////////////////////
// Constructor(s)
///////////////////////////////////////////////////
Replace::Replace( )
{
}
///////////////////////////////////////////////////

///////////////////////////////////////////////////
Replace::Replace( file_t inS, file_t inD, inputMode_t inM )
:my_templateFile( TEMPLATE_FILE ),
 my_sourceFile( inS ),
 my_destFile( inD ),
 my_mode( inM )
{
}
///////////////////////////////////////////////////

///////////////////////////////////////////////////
// Destructor(s)
///////////////////////////////////////////////////
Replace::~Replace( )
{
}
///////////////////////////////////////////////////

///////////////////////////////////////////////////
// Public Modifier(s)

///////////////////////////////////////////////////
// Protected Modifier(s)

///////////////////////////////////////////////////
// Protected Accessor(s)
///////////////////////////////////////////////////
void Replace::clearScreen( ) const
{
	system( CLEAR_SCREEN );
}
///////////////////////////////////////////////////

///////////////////////////////////////////////////
void Replace::displayIntro( ) const
{
	cout << '\n' << COMPANY << '\n' << TITLE_LINE << "\n\n\n"
		 << AUTHOR << "\n\n" << endl;

	for( uint_t i = ( 0 ); i <  strlen( START_PROGRAM ); ++i )
	{
		cout << START_PROGRAM[i];

		Sleep( 10 );

	} // end of for-loop
	
	cout << '\n' << endl;

	Sleep( 50 );

	( mode( ) == BYTE_MODE ) ? cout << MODE << B_MODE << endl:
	                           cout << MODE << W_MODE << endl;

	cout << '\n' << STATUS_START << endl;
}
///////////////////////////////////////////////////

///////////////////////////////////////////////////
void Replace::completedStatus( ) const
{
	cout << STATUS_COMPLETE << endl;

	endl( cout );

	for( uint_t i = ( 0 ); i < strlen( END_PROGRAM ); ++i )
	{
		cout << END_PROGRAM[i];

		Sleep( 10 );

	} // end of for-loop

	cout << '\n' << endl;

} // end of completedStatus
///////////////////////////////////////////////////

///////////////////////////////////////////////////
// Protected Attribute(s)

///////////////////////////////////////////////////
// Public Accessor(s)
///////////////////////////////////////////////////
file_t Replace::templateFile( ) const
{
	return( my_templateFile );

} // end of templateFile( )
///////////////////////////////////////////////////

///////////////////////////////////////////////////
file_t Replace::sourceFile( ) const
{
	return( my_sourceFile );

} // end of sourceFile( )
///////////////////////////////////////////////////

///////////////////////////////////////////////////
file_t Replace::destFile( ) const
{
	return( my_destFile );

} // end of destFile( )
///////////////////////////////////////////////////

///////////////////////////////////////////////////
// Private Modifier(s)

///////////////////////////////////////////////////
// Private Accessor(s)
inputMode_t Replace::mode( ) const
{
	return( my_mode );

} // end of mode( )